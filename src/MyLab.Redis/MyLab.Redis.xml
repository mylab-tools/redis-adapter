<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLab.Redis</name>
    </assembly>
    <members>
        <member name="T:MyLab.Redis.Connection.IBackgroundRedisConnectionManager">
            <summary>
            Manage Redis connection
            </summary>
        </member>
        <member name="E:MyLab.Redis.Connection.IBackgroundRedisConnectionManager.Connected">
            <summary>
            Occurred when Redis connected
            </summary>
        </member>
        <member name="M:MyLab.Redis.Connection.IBackgroundRedisConnectionManager.ProvideConnection">
            <summary>
            Provides established connection
            </summary>
        </member>
        <member name="M:MyLab.Redis.Connection.IBackgroundRedisConnectionManager.ConnectAsync">
            <summary>
            Initiate connection
            </summary>
        </member>
        <member name="T:MyLab.Redis.Connection.IRedisConnectionPolicy">
            <summary>
            Defines the connection policy to Redis
            </summary>
        </member>
        <member name="M:MyLab.Redis.Connection.IRedisConnectionPolicy.RegisterDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers dependencies to available the policy
            </summary>
        </member>
        <member name="T:MyLab.Redis.Connection.LazyRedisConnectionPolicy">
            <summary>
            A policy which defines a connection when it required
            </summary>
        </member>
        <member name="M:MyLab.Redis.Connection.LazyRedisConnectionPolicy.RegisterDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="T:MyLab.Redis.Connection.BackgroundRedisConnectionPolicy">
            <summary>
            A policy which defines a connection at the start of app asynchronously
            </summary>
        </member>
        <member name="M:MyLab.Redis.Connection.BackgroundRedisConnectionPolicy.RegisterDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="T:MyLab.Redis.Connection.IRedisConnectionProvider">
            <summary>
            Provides connection to Redis
            </summary>
        </member>
        <member name="M:MyLab.Redis.Connection.IRedisConnectionProvider.Provide">
            <summary>
            Provides connection
            </summary>
        </member>
        <member name="T:MyLab.Redis.Connection.RedisConnectionStrategy">
            <summary>
            Defines connection strategy
            </summary>
        </member>
        <member name="F:MyLab.Redis.Connection.RedisConnectionStrategy.Undefined">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:MyLab.Redis.Connection.RedisConnectionStrategy.Lazy">
            <summary>
            Connected when request
            </summary>
        </member>
        <member name="F:MyLab.Redis.Connection.RedisConnectionStrategy.Background">
            <summary>
            Connect in background thread
            </summary>
        </member>
        <member name="T:MyLab.Redis.Connection.RedisNotConnectedException">
            <summary>
            Occurred when Redis connection is not established
            </summary>
        </member>
        <member name="M:MyLab.Redis.Connection.RedisNotConnectedException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.Connection.RedisNotConnectedException"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.HealthCheck.RedisConnectionHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:MyLab.Redis.RedisIntegration">
            <summary>
            Contains extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisIntegration.AddRedis(Microsoft.Extensions.DependencyInjection.IServiceCollection,MyLab.Redis.Connection.IRedisConnectionPolicy)">
            <summary>
            Adds Redis services
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisIntegration.AddRedis(Microsoft.Extensions.DependencyInjection.IServiceCollection,MyLab.Redis.Connection.RedisConnectionStrategy)">
            <summary>
            Adds Redis services
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisIntegration.ConfigureRedis(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Configures Redis options with configuration section
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisIntegration.ConfigureRedis(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MyLab.Redis.RedisOptions})">
            <summary>
            Configures Redis options with configuration action
            </summary>
        </member>
        <member name="T:MyLab.Redis.ObjectModel.HashRedisKey">
            <summary>
            Represent Redis HASH
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.#ctor(MyLab.Redis.RedisDbProvider,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.ObjectModel.HashRedisKey"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.DecrementAsync(System.String,System.Int64)">
            <summary>
            Decrements the number stored at field in the hash stored at key by decrement. If key does not exist, a new key holding a hash is created. If field does not exist or holds a string that cannot be interpreted as integer, the value is set to 0 before the operation is performed.
            </summary>
            <param name="hashField">The field in the hash to decrement.</param>
            <param name="value">The amount to decrement by.</param>
            <returns>The value at field after the decrement operation.</returns>
            <remarks>https://redis.io/commands/hincrby</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.DecrementAsync(System.String,System.Double)">
            <summary>s
            Decrement the specified field of an hash stored at key, and representing a floating point number, by the specified decrement. If the field does not exist, it is set to 0 before performing the operation.
            </summary>
            <param name="hashField">The field in the hash to decrement.</param>
            <param name="value">The amount to decrement by.</param>
            <returns>The value at field after the decrement operation.</returns>
            <remarks>The precision of the output is fixed at 17 digits after the decimal point regardless of the actual internal precision of the computation.</remarks>
            <remarks>https://redis.io/commands/hincrbyfloat</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.DeleteFieldAsync(System.String)">
            <summary>
            Removes the specified fields from the hash stored at key. Non-existing fields are ignored. Non-existing keys are treated as empty hashes and this command returns 0.
            </summary>
            <param name="hashField">The field in the hash to delete.</param>
            <remarks>https://redis.io/commands/hdel</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.DeleteFieldsAsync(System.String[])">
            <summary>
            Removes the specified fields from the hash stored at key. Non-existing fields are ignored. Non-existing keys are treated as empty hashes and this command returns 0.
            </summary>
            <param name="hashFields">The fields in the hash to delete.</param>
            <returns>The number of fields that were removed.</returns>
            <remarks>https://redis.io/commands/hdel</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.FieldExistsAsync(System.String)">
            <summary>
            Returns if field is an existing field in the hash stored at key.
            </summary>
            <param name="hashField">The field in the hash to check.</param>
            <returns>1 if the hash contains field. 0 if the hash does not contain field, or key does not exist.</returns>
            <remarks>https://redis.io/commands/hexists</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.GetAsync(System.String)">
            <summary>
            Returns the value associated with field in the hash stored at key.
            </summary>
            <param name="hashField">The field in the hash to get.</param>
            <returns>The value associated with field, or nil when field is not present in the hash or key does not exist.</returns>
            <remarks>https://redis.io/commands/hget</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.GetAsync(System.String[])">
            <summary>
            Returns the values associated with the specified fields in the hash stored at key.
            For every field that does not exist in the hash, a nil value is returned.Because a non-existing keys are treated as empty hashes, running HMGET against a non-existing key will return a list of nil values.
            </summary>
            <param name="hashFields">The fields in the hash to get.</param>
            <returns>List of values associated with the given fields, in the same order as they are requested.</returns>
            <remarks>https://redis.io/commands/hmget</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.GetAllAsync">
            <summary>
            Returns all fields and values of the hash stored at key. 
            </summary>
            <returns>List of fields and their values stored in the hash, or an empty list when key does not exist.</returns>
            <remarks>https://redis.io/commands/hgetall</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.IncrementAsync(System.String,System.Int64)">
            <summary>
            Increments the number stored at field in the hash stored at key by increment. If key does not exist, a new key holding a hash is created. If field does not exist or holds a string that cannot be interpreted as integer, the value is set to 0 before the operation is performed.
            </summary>
            <param name="hashField">The field in the hash to increment.</param>
            <param name="value">The amount to increment by.</param>
            <returns>The value at field after the increment operation.</returns>
            <remarks>The range of values supported by HINCRBY is limited to 64 bit signed integers.</remarks>
            <remarks>https://redis.io/commands/hincrby</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.IncrementAsync(System.String,System.Double)">
            <summary>
            Increment the specified field of an hash stored at key, and representing a floating point number, by the specified increment. If the field does not exist, it is set to 0 before performing the operation.
            </summary>
            <param name="hashField">The field in the hash to increment.</param>
            <param name="value">The amount to increment by.</param>
            <returns>The value at field after the increment operation.</returns>
            <remarks>The precision of the output is fixed at 17 digits after the decimal point regardless of the actual internal precision of the computation.</remarks>
            <remarks>https://redis.io/commands/hincrbyfloat</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.KeysAsync">
            <summary>
            Returns all field names in the hash stored at key.
            </summary>
            <returns>List of fields in the hash, or an empty list when key does not exist.</returns>
            <remarks>https://redis.io/commands/hkeys</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.LengthAsync">
            <summary>
            Returns the number of fields contained in the hash stored at key.
            </summary>
            <returns>The number of fields in the hash, or 0 when key does not exist.</returns>
            <remarks>https://redis.io/commands/hlen</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.ScanAsync(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            The HSCAN command is used to incrementally iterate over a hash; note: to resume an iteration via <i>cursor</i>, cast the original enumerable or enumerator to <i>IScanningCursor</i>.
            </summary>
            <param name="pattern">The pattern of keys to get entries for.</param>
            <param name="pageSize">The page size to iterate by.</param>
            <param name="cursor">The cursor position to start at.</param>
            <param name="pageOffset">The page offset to start at.</param>
            <returns>Yields all elements of the hash matching the pattern.</returns>
            <remarks>https://redis.io/commands/hscan</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.SetAsync(StackExchange.Redis.HashEntry[])">
            <summary>
            Sets the specified fields to their respective values in the hash stored at key. This command overwrites any specified fields that already exist in the hash, leaving other unspecified fields untouched. If key does not exist, a new key holding a hash is created.
            </summary>
            <param name="hashFields">The entries to set in the hash.</param>
            <remarks>https://redis.io/commands/hmset</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.SetAsync(System.String,StackExchange.Redis.RedisValue)">
            <summary>
            Sets field in the hash stored at key to value. If key does not exist, a new key holding a hash is created. If field already exists in the hash, it is overwritten.
            </summary>
            <param name="hashField">The field to set in the hash.</param>
            <param name="value">The value to set.</param>
            <param name="when">Which conditions under which to set the field value (defaults to always).</param>
            <remarks>https://redis.io/commands/hset</remarks>
            <remarks>https://redis.io/commands/hsetnx</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.StringLengthAsync(System.String)">
            <summary>
            Returns the string length of the value associated with field in the hash stored at key.
            </summary>
            <param name="hashField">The field containing the string</param>
            <returns>the length of the string at field, or 0 when key does not exist.</returns>
            <remarks>https://redis.io/commands/hstrlen</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.HashRedisKey.ValuesAsync">
            <summary>
            Returns all values in the hash stored at key.
            </summary>
            <returns>List of values in the hash, or an empty list when key does not exist.</returns>
            <remarks>https://redis.io/commands/hvals</remarks>
        </member>
        <member name="T:MyLab.Redis.ObjectModel.ListRedisKey">
            <summary>
            Represent Redis LIST
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.#ctor(MyLab.Redis.RedisDbProvider,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.ObjectModel.ListRedisKey"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.GetByIndexAsync(System.Int64)">
            <summary>
            Returns the element at index index in the list stored at key. The index is zero-based, so 0 means the first element, 1 the second element and so on. Negative indices can be used to designate elements starting at the tail of the list. Here, -1 means the last element, -2 means the penultimate and so forth.
            </summary>
            <param name="index">The index position to ge the value at.</param>
            <returns>The requested element, or nil when index is out of range.</returns>
            <remarks>https://redis.io/commands/lindex</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.InsertAfterAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue)">
            <summary>
            Inserts value in the list stored at key either before or after the reference value pivot.
            When key does not exist, it is considered an empty list and no operation is performed.
            </summary>
            <param name="pivot">The value to insert after.</param>
            <param name="value">The value to insert.</param>
            <returns>The length of the list after the insert operation, or -1 when the value pivot was not found.</returns>
            <remarks>https://redis.io/commands/linsert</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.InsertBeforeAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue)">
            <summary>
            Inserts value in the list stored at key either before or after the reference value pivot.
            When key does not exist, it is considered an empty list and no operation is performed.
            </summary>
            <param name="pivot">The value to insert before.</param>
            <param name="value">The value to insert.</param>
            <returns>The length of the list after the insert operation, or -1 when the value pivot was not found.</returns>
            <remarks>https://redis.io/commands/linsert</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.LeftPopAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Removes and returns the first element of the list stored at key.
            </summary>
            <param name="key">The key of the list.</param>
            <returns>The value of the first element, or nil when key does not exist.</returns>
            <remarks>https://redis.io/commands/lpop</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.LeftPushAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.When)">
            <summary>
            Insert the specified value at the head of the list stored at key. If key does not exist, it is created as empty list before performing the push operations.
            </summary>
            <param name="value">The value to add to the head of the list.</param>
            <param name="when">Which conditions to add to the list under (defaults to always).</param>
            <returns>The length of the list after the push operations.</returns>
            <remarks>https://redis.io/commands/lpush</remarks>
            <remarks>https://redis.io/commands/lpushx</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.LeftPushAsync(StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue[])">
            <summary>
            Insert the specified value at the head of the list stored at key. If key does not exist, it is created as empty list before performing the push operations.
            </summary>
            <param name="key">The key of the list.</param>
            <param name="values">The value to add to the head of the list.</param>
            <returns>The length of the list after the push operations.</returns>
            <remarks>https://redis.io/commands/lpush</remarks>
            <remarks>https://redis.io/commands/lpushx</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.LeftPushAsync(StackExchange.Redis.RedisValue[])">
            <summary>
            Insert all the specified values at the head of the list stored at key. If key does not exist, it is created as empty list before performing the push operations.
            Elements are inserted one after the other to the head of the list, from the leftmost element to the rightmost element. So for instance the command LPUSH mylist a b c will result into a list containing c as first element, b as second element and a as third element.
            </summary>
            <param name="values">The values to add to the head of the list.</param>
            <returns>The length of the list after the push operations.</returns>
            <remarks>https://redis.io/commands/lpush</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.LengthAsync">
            <summary>
            Returns the length of the list stored at key. If key does not exist, it is interpreted as an empty list and 0 is returned. 
            </summary>
            <returns>The length of the list at key.</returns>
            <remarks>https://redis.io/commands/llen</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.RangeAsync(System.Int64,System.Int64)">
            <summary>
            Returns the specified elements of the list stored at key. The offsets start and stop are zero-based indexes, with 0 being the first element of the list (the head of the list), 1 being the next element and so on.
            These offsets can also be negative numbers indicating offsets starting at the end of the list.For example, -1 is the last element of the list, -2 the penultimate, and so on.
            Note that if you have a list of numbers from 0 to 100, LRANGE list 0 10 will return 11 elements, that is, the rightmost item is included. 
            </summary>
            <param name="start">The start index of the list.</param>
            <param name="stop">The stop index of the list.</param>
            <returns>List of elements in the specified range.</returns>
            <remarks>https://redis.io/commands/lrange</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.RemoveElementAsync(StackExchange.Redis.RedisValue,System.Int64)">
            <summary>
            Removes the first count occurrences of elements equal to value from the list stored at key. The count argument influences the operation in the following ways:
            count &gt; 0: Remove elements equal to value moving from head to tail.
            count &lt; 0: Remove elements equal to value moving from tail to head.
            count = 0: Remove all elements equal to value.
            </summary>
            <param name="value">The value to remove from the list.</param>
            <param name="count">The count behavior (see method summary).</param>
            <returns>The number of removed elements.</returns>
            <remarks>https://redis.io/commands/lrem</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.RightPopAsync">
            <summary>
            Removes and returns the last element of the list stored at key.
            </summary>
            <returns>The element being popped.</returns>
            <remarks>https://redis.io/commands/rpop</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.RightPushAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.When)">
            <summary>
            Insert the specified value at the tail of the list stored at key. If key does not exist, it is created as empty list before performing the push operation.
            </summary>
            <param name="value">The value to add to the tail of the list.</param>
            <param name="when">Which conditions to add to the list under.</param>
            <returns>The length of the list after the push operation.</returns>
            <remarks>https://redis.io/commands/rpush</remarks>
            <remarks>https://redis.io/commands/rpushx</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.RightPushAsync(StackExchange.Redis.RedisValue[])">
            <summary>
            Insert all the specified values at the tail of the list stored at key. If key does not exist, it is created as empty list before performing the push operation. 
            Elements are inserted one after the other to the tail of the list, from the leftmost element to the rightmost element. So for instance the command RPUSH mylist a b c will result into a list containing a as first element, b as second element and c as third element.
            </summary>
            <param name="values">The values to add to the tail of the list.</param>
            <returns>The length of the list after the push operation.</returns>
            <remarks>https://redis.io/commands/rpush</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.SetByIndexAsync(System.Int64,StackExchange.Redis.RedisValue)">
            <summary>
            Sets the list element at index to value. For more information on the index argument, see ListGetByIndex. An error is returned for out of range indexes.
            </summary>
            <param name="index">The index to set the value at.</param>
            <param name="value">The values to add to the list.</param>
            <remarks>https://redis.io/commands/lset</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.ListRedisKey.TrimAsync(System.Int64,System.Int64)">
            <summary>
            Trim an existing list so that it will contain only the specified range of elements specified. Both start and stop are zero-based indexes, where 0 is the first element of the list (the head), 1 the next element and so on.
            For example: LTRIM foobar 0 2 will modify the list stored at foobar so that only the first three elements of the list will remain.
            start and end can also be negative numbers indicating offsets from the end of the list, where -1 is the last element of the list, -2 the penultimate element and so on.
            </summary>
            <param name="start">The start index of the list to trim to.</param>
            <param name="stop">The end index of the list to trim to.</param>
            <remarks>https://redis.io/commands/ltrim</remarks>
        </member>
        <member name="T:MyLab.Redis.ObjectModel.RedisCache">
            <summary>
            Caches an object in Redis
            </summary>
        </member>
        <member name="P:MyLab.Redis.ObjectModel.RedisCache.DefaultExpiry">
            <summary>
            Default cache item TTL
            </summary>
            <remarks>1 hour by default</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisCache.#ctor(MyLab.Redis.RedisDbLink,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.ObjectModel.RedisCache"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisCache.AddAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            Retrieve object from cache by id or create new and add into cache
            </summary>
            <typeparam name="T">cached object type</typeparam>
            <param name="id">identifier</param>
            <param name="item">item for caching</param>
            <param name="newItemExpiry">cache item expiry for new item</param>
            <returns>cached object</returns>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisCache.FetchAsync``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            Retrieve object from cache by id or create new and add into cache
            </summary>
            <typeparam name="T">cached object type</typeparam>
            <param name="id">identifier</param>
            <param name="creator">function to create new object when cache is missed</param>
            <param name="newItemExpiry">cache item expiry for new item</param>
            <returns>cached object</returns>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisCache.TryFetchAsync``1(System.String)">
            <summary>
            Try retrieve object from cache by id 
            </summary>
            <typeparam name="T">cached object type</typeparam>
            <param name="id">identifier</param>
            <returns>cached object or default value</returns>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisCache.UpdateExpiryAsync(System.String,System.TimeSpan)">
            <summary>
            Updates cache item expiry
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisCache.RemoveAsync(System.String)">
            <summary>
            Removes item from cache
            </summary>
        </member>
        <member name="T:MyLab.Redis.ObjectModel.RedisKeyBase">
            <summary>
            The base class for Redis keys
            </summary>
        </member>
        <member name="P:MyLab.Redis.ObjectModel.RedisKeyBase.KeyName">
            <summary>
            The key name
            </summary>
        </member>
        <member name="P:MyLab.Redis.ObjectModel.RedisKeyBase.RedisDb">
            <summary>
            Redis DB reference
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.#ctor(MyLab.Redis.RedisDbProvider,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.ObjectModel.RedisKeyBase"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.DeleteAsync">
            <summary>
            Removes the specified key. A key is ignored if it does not exist.
            If UNLINK is available (Redis 4.0+), it will be used.
            </summary>
            <remarks>https://redis.io/commands/del</remarks>
            <remarks>https://redis.io/commands/unlink</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.DumpAsync(StackExchange.Redis.RedisKey)">
            <summary>
            Serialize the value stored at key in a Redis-specific format and return it to the user. The returned value can be synthesized back into a Redis key using the RESTORE command.
            </summary>
            <param name="key">The key to dump.</param>
            <returns>the serialized value.</returns>
            <remarks>https://redis.io/commands/dump</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.ExistsAsync">
            <summary>
            Returns if key exists.
            </summary>
            <returns>1 if the key exists. 0 if the key does not exist.</returns>
            <remarks>https://redis.io/commands/exists</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.ExpireAsync(System.Nullable{System.TimeSpan})">
            <summary>
            Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is said to be volatile in Redis terminology.
            </summary>
            <param name="expiry">The timeout to set.</param>
            <returns>`true` - if the timeout was set. `false` - if key does not exist or the timeout could not be set.</returns>
            <remarks>If key is updated before the timeout has expired, then the timeout is removed as if the PERSIST command was invoked on key.
            For Redis versions &lt; 2.1.3, existing timeouts cannot be overwritten. So, if key already has an associated timeout, it will do nothing and return 0. Since Redis 2.1.3, you can update the timeout of a key. It is also possible to remove the timeout using the PERSIST command. See the page on key expiry for more information.</remarks>
            <remarks>https://redis.io/commands/expire</remarks>
            <remarks>https://redis.io/commands/pexpire</remarks>
            <remarks>https://redis.io/commands/persist</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.ExpireAsync(System.Nullable{System.DateTime})">
            <summary>
            Set a timeout on key. After the timeout has expired, the key will automatically be deleted. A key with an associated timeout is said to be volatile in Redis terminology.
            </summary>
            <param name="expiry">The exact date to expiry to set.</param>
            <returns>`true` - if the timeout was set. `false` - if key does not exist or the timeout could not be set.</returns>
            <remarks>If key is updated before the timeout has expired, then the timeout is removed as if the PERSIST command was invoked on key.
            For Redis versions &lt; 2.1.3, existing timeouts cannot be overwritten. So, if key already has an associated timeout, it will do nothing and return 0. Since Redis 2.1.3, you can update the timeout of a key. It is also possible to remove the timeout using the PERSIST command. See the page on key expiry for more information.</remarks>
            <remarks>https://redis.io/commands/expireat</remarks>
            <remarks>https://redis.io/commands/pexpireat</remarks>
            <remarks>https://redis.io/commands/persist</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.IdleTimeAsync">
            <summary>
            Returns the time since the object stored at the specified key is idle (not requested by read or write operations)
            </summary>
            <returns>The time since the object stored at the specified key is idle</returns>
            <remarks>https://redis.io/commands/object</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.PersistAsync">
            <summary>
            Remove the existing timeout on key, turning the key from volatile (a key with an expire set) to persistent (a key that will never expire as no timeout is associated).
            </summary>
            <returns>`true` - if the timeout was removed. `false` - if key does not exist or does not have an associated timeout.</returns>
            <remarks>https://redis.io/commands/persist</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.RestoreAsync(StackExchange.Redis.RedisKey,System.Byte[])">
            <summary>
            Create a key associated with a value that is obtained by deserializing the provided serialized value (obtained via DUMP).
            If ttl is 0 the key is created without any expire, otherwise the specified expire time(in milliseconds) is set.
            </summary>
            <param name="key">The key to restore.</param>
            <param name="value">The value of the key.</param>
            <remarks>https://redis.io/commands/restore</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.TimeToLiveAsync">
            <summary>
            Returns the remaining time to live of a key that has a timeout.  This introspection capability allows a Redis client to check how many seconds a given key will continue to be part of the dataset.
            </summary>
            <returns>TTL, or nil when key does not exist or does not have a timeout.</returns>
            <remarks>https://redis.io/commands/ttl</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.TypeAsync">
            <summary>
            Returns the string representation of the type of the value stored at key. The different types that can be returned are: string, list, set, zset and hash.
            </summary>
            <returns>Type of key, or none when key does not exist.</returns>
            <remarks>https://redis.io/commands/type</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.RedisKeyBase.TouchAsync">
            <summary>
            Touch the specified key. 
            </summary>
            <returns>True if the key was touched.</returns>
            <remarks>https://redis.io/commands/touch</remarks>
        </member>
        <member name="T:MyLab.Redis.ObjectModel.SetRedisKey">
            <summary>
            Represent Redis SET
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.#ctor(MyLab.Redis.RedisDbProvider,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.ObjectModel.SetRedisKey"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.AddAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Add the specified member to the set stored at key.
            Specified members that are already a member of this set are ignored.
            If key does not exist, a new set is created before adding the specified members.
            </summary>
            <param name="value">The value to add to the set.</param>
            <returns>True if the specified member was not already present in the set, else False</returns>
            <remarks>https://redis.io/commands/sadd</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.AddAsync(StackExchange.Redis.RedisValue[])">
            <summary>
            Add the specified members to the set stored at key.
            Specified members that are already a member of this set are ignored.
            If key does not exist, a new set is created before adding the specified members.
            </summary>
            <param name="values">The values to add to the set.</param>
            <returns>The number of elements that were added to the set, not including all the elements already present into the set.</returns>
            <remarks>https://redis.io/commands/sadd</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.ContainsAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Returns if member is a member of the set stored at key.
            </summary>
            <param name="value">The value to check for .</param>
            <returns>`true` - if the element is a member of the set. `false` - if the element is not a member of the set, or if key does not exist.</returns>
            <remarks>https://redis.io/commands/sismember</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.LengthAsync">
            <summary>
            Returns the set cardinality (number of elements) of the set stored at key.
            </summary>
            <returns>The cardinality (number of elements) of the set, or 0 if key does not exist.</returns>
            <remarks>https://redis.io/commands/scard</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.MembersAsync">
            <summary>
            Returns all the members of the set value stored at key.
            </summary>
            <returns>All elements of the set.</returns>
            <remarks>https://redis.io/commands/smembers</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.MoveMemberAsync(System.String,StackExchange.Redis.RedisValue)">
            <summary>
            Move member from the set at source to the set at destination. This operation is atomic. In every given moment the element will appear to be a member of source or destination for other clients.
            When the specified element already exists in the destination set, it is only removed from the source set.
            </summary>
            <param name="destination">The key of the destination set.</param>
            <param name="value">The value to move.</param>
            <param name="flags">The flags to use for this operation.</param>
            <returns>1 if the element is moved. 0 if the element is not a member of source and no operation was performed.</returns>
            <remarks>https://redis.io/commands/smove</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.SetPopAsync">
            <summary>
            Removes and returns a random element from the set value stored at key.
            </summary>
            <returns>The removed element, or nil when key does not exist.</returns>
            <remarks>https://redis.io/commands/spop</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.PopAsync(System.Int64)">
            <summary>
            Removes and returns the specified number of random elements from the set value stored at key.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>An array of elements, or an empty array when key does not exist.</returns>
            <remarks>https://redis.io/commands/spop</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.RandomMemberAsync">
            <summary>
            Return a random element from the set value stored at key.
            </summary>
            <returns>The randomly selected element, or nil when key does not exist</returns>
            <remarks>https://redis.io/commands/srandmember</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.RandomMembersAsync(System.Int64)">
            <summary>
            Return an array of count distinct elements if count is positive. If called with a negative count the behavior changes and the command is allowed to return the same element multiple times.
            In this case the numer of returned elements is the absolute value of the specified count.
            </summary>
            <param name="count">The count of members to get.</param>
            <returns>An array of elements, or an empty array when key does not exist</returns>
            <remarks>https://redis.io/commands/srandmember</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.RemoveMemberAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Remove the specified member from the set stored at key.  Specified members that are not a member of this set are ignored.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>True if the specified member was already present in the set, else False</returns>
            <remarks>https://redis.io/commands/srem</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.RemoveMembersAsync(StackExchange.Redis.RedisValue[])">
            <summary>
            Remove the specified members from the set stored at key. Specified members that are not a member of this set are ignored.
            </summary>
            <param name="values">The values to remove.</param>
            <returns>The number of members that were removed from the set, not including non existing members.</returns>
            <remarks>https://redis.io/commands/srem</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SetRedisKey.ScanAsync(StackExchange.Redis.RedisValue,System.Int32,System.Int64,System.Int32)">
            <summary>
            The SSCAN command is used to incrementally iterate over set; note: to resume an iteration via <i>cursor</i>, cast the original enumerable or enumerator to <i>IScanningCursor</i>.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="pageSize">The page size to iterate by.</param>
            <param name="cursor">The cursor position to start at.</param>
            <param name="pageOffset">The page offset to start at.</param>
            <returns>Yields all matching elements of the set.</returns>
            <remarks>https://redis.io/commands/sscan</remarks>
        </member>
        <member name="T:MyLab.Redis.ObjectModel.SortedRedisKey">
            <summary>
            Represent a key with sorting abilities
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedRedisKey.SortAsync(System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.SortType,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue[])">
            <summary>
            Sorts a list, set or sorted set (numerically or alphabetically, ascending by default); By default, the elements themselves are compared, but the values can also be
            used to perform external key-lookups using the <c>by</c> parameter. By default, the elements themselves are returned, but external key-lookups (one or many) can
            be performed instead by specifying the <c>get</c> parameter (note that <c>#</c> specifies the element itself, when used in <c>get</c>).
            Referring to the <a href="https://redis.io/commands/sort">redis SORT documentation </a> for examples is recommended. When used in hashes, <c>by</c> and <c>get</c>
            can be used to specify fields using <c>-&gt;</c> notation (again, refer to redis documentation).
            </summary>
            <param name="skip">How many entries to skip on the return.</param>
            <param name="take">How many entries to take on the return.</param>
            <param name="order">The ascending or descending order (defaults to ascending).</param>
            <param name="sortType">The sorting method (defaults to numeric).</param>
            <param name="by">The key pattern to sort by, if any. e.g. ExternalKey_* would sort by ExternalKey_{listvalue} as a lookup.</param>
            <param name="get">The key pattern to sort by, if any e.g. ExternalKey_* would return the value of ExternalKey_{listvalue} for each entry.</param>
            <returns>The sorted elements, or the external values if <c>get</c> is specified.</returns>
            <remarks>https://redis.io/commands/sort</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedRedisKey.SortAndStoreAsync(StackExchange.Redis.RedisKey,System.Int64,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.SortType,StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue[])">
            <summary>
            Sorts a list, set or sorted set (numerically or alphabetically, ascending by default); By default, the elements themselves are compared, but the values can also be
            used to perform external key-lookups using the <c>by</c> parameter. By default, the elements themselves are returned, but external key-lookups (one or many) can
            be performed instead by specifying the <c>get</c> parameter (note that <c>#</c> specifies the element itself, when used in <c>get</c>).
            Referring to the <a href="https://redis.io/commands/sort">redis SORT documentation </a> for examples is recommended. When used in hashes, <c>by</c> and <c>get</c>
            can be used to specify fields using <c>-&gt;</c> notation (again, refer to redis documentation).
            </summary>
            <param name="destination">The destination key to store results in.</param>
            <param name="skip">How many entries to skip on the return.</param>
            <param name="take">How many entries to take on the return.</param>
            <param name="order">The ascending or descending order (defaults to ascending).</param>
            <param name="sortType">The sorting method (defaults to numeric).</param>
            <param name="by">The key pattern to sort by, if any. e.g. ExternalKey_* would sort by ExternalKey_{listvalue} as a lookup.</param>
            <param name="get">The key pattern to sort by, if any e.g. ExternalKey_* would return the value of ExternalKey_{listvalue} for each entry.</param>
            <returns>The number of elements stored in the new list.</returns>
            <remarks>https://redis.io/commands/sort</remarks>
        </member>
        <member name="T:MyLab.Redis.ObjectModel.SortedSetRedisKey">
            <summary>
            Represent Redis SORTEDSET
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.#ctor(MyLab.Redis.RedisDbProvider,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.ObjectModel.SortedSetRedisKey"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.AddAsync(StackExchange.Redis.RedisValue,System.Double)">
            <summary>
            Adds the specified member with the specified score to the sorted set stored at key. If the specified member is already a member of the sorted set, the score is updated and the element reinserted at the right position to ensure the correct ordering.
            </summary>
            <param name="member">The member to add to the sorted set.</param>
            <param name="score">The score for the member to add to the sorted set.</param>
            <returns>True if the value was added, False if it already existed (the score is still updated)</returns>
            <remarks>https://redis.io/commands/zadd</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.AddAsync(StackExchange.Redis.SortedSetEntry[])">
            <summary>
            Adds all the specified members with the specified scores to the sorted set stored at key. If a specified member is already a member of the sorted set, the score is updated and the element reinserted at the right position to ensure the correct ordering.
            </summary>
            <param name="values">The members and values to add to the sorted set.</param>
            <returns>The number of elements added to the sorted sets, not including elements already existing for which the score was updated.</returns>
            <remarks>https://redis.io/commands/zadd</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.DecrementAsync(StackExchange.Redis.RedisValue,System.Double)">
            <summary>
            Decrements the score of member in the sorted set stored at key by decrement. If member does not exist in the sorted set, it is added with -decrement as its score (as if its previous score was 0.0).
            </summary>
            <param name="member">The member to decrement.</param>
            <param name="value">The amount to decrement by.</param>
            <returns>The new score of member.</returns>
            <remarks>https://redis.io/commands/zincrby</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.IncrementAsync(StackExchange.Redis.RedisValue,System.Double)">
            <summary>
            Increments the score of member in the sorted set stored at key by increment. If member does not exist in the sorted set, it is added with increment as its score (as if its previous score was 0.0).
            </summary>
            <param name="member">The member to increment.</param>
            <param name="value">The amount to increment by.</param>
            <returns>The new score of member.</returns>
            <remarks>https://redis.io/commands/zincrby</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.LengthAsync(System.Double,System.Double,StackExchange.Redis.Exclude)">
            <summary>
            Returns the sorted set cardinality (number of elements) of the sorted set stored at key.
            </summary>
            <param name="min">The min score to filter by (defaults to negative infinity).</param>
            <param name="max">The max score to filter by (defaults to positive infinity).</param>
            <param name="exclude">Whether to exclude <paramref name="min"/> and <paramref name="max"/> from the range check (defaults to both inclusive).</param>
            <returns>The cardinality (number of elements) of the sorted set, or 0 if key does not exist.</returns>
            <remarks>https://redis.io/commands/zcard</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.LengthByValueAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.Exclude)">
            <summary>
            When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns the number of elements in the sorted set at key with a value between min and max.
            </summary>
            <param name="min">The min value to filter by.</param>
            <param name="max">The max value to filter by.</param>
            <param name="exclude">Whether to exclude <paramref name="min"/> and <paramref name="max"/> from the range check (defaults to both inclusive).</param>
            <returns>The number of elements in the specified score range.</returns>
            <remarks>https://redis.io/commands/zlexcount</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RangeByRankAsync(System.Int64,System.Int64,StackExchange.Redis.Order)">
            <summary>
            Returns the specified range of elements in the sorted set stored at key. By default the elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.
            Both start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can also be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the sorted set, -2 the penultimate element and so on.
            </summary>
            <param name="start">The start index to get.</param>
            <param name="stop">The stop index to get.</param>
            <param name="order">The order to sort by (defaults to ascending).</param>
            <returns>List of elements in the specified range.</returns>
            <remarks>https://redis.io/commands/zrange</remarks>
            <remarks>https://redis.io/commands/zrevrange</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RangeByRankWithScoresAsync(System.Int64,System.Int64,StackExchange.Redis.Order)">
            <summary>
            Returns the specified range of elements in the sorted set stored at key. By default the elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.
            Both start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can also be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the sorted set, -2 the penultimate element and so on.
            </summary>
            <param name="start">The start index to get.</param>
            <param name="stop">The stop index to get.</param>
            <param name="order">The order to sort by (defaults to ascending).</param>
            <returns>List of elements in the specified range.</returns>
            <remarks>https://redis.io/commands/zrange</remarks>
            <remarks>https://redis.io/commands/zrevrange</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64)">
            <summary>
            Returns the specified range of elements in the sorted set stored at key. By default the elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.
            Start and stop are used to specify the min and max range for score values. Similar to other range methods the values are inclusive.
            </summary>
            <param name="start">The minimum score to filter by.</param>
            <param name="stop">The maximum score to filter by.</param>
            <param name="exclude">Which of <paramref name="start"/> and <paramref name="stop"/> to exclude (defaults to both inclusive).</param>
            <param name="order">The order to sort by (defaults to ascending).</param>
            <param name="skip">How many items to skip.</param>
            <param name="take">How many items to take.</param>
            <returns>List of elements in the specified score range.</returns>
            <remarks>https://redis.io/commands/zrangebyscore</remarks>
            <remarks>https://redis.io/commands/zrevrangebyscore</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RangeByScoreWithScoresAsync(System.Double,System.Double,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64)">
            <summary>
            Returns the specified range of elements in the sorted set stored at key. By default the elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.
            Start and stop are used to specify the min and max range for score values. Similar to other range methods the values are inclusive.
            </summary>
            <param name="start">The minimum score to filter by.</param>
            <param name="stop">The maximum score to filter by.</param>
            <param name="exclude">Which of <paramref name="start"/> and <paramref name="stop"/> to exclude (defaults to both inclusive).</param>
            <param name="order">The order to sort by (defaults to ascending).</param>
            <param name="skip">How many items to skip.</param>
            <param name="take">How many items to take.</param>
            <returns>List of elements in the specified score range.</returns>
            <remarks>https://redis.io/commands/zrangebyscore</remarks>
            <remarks>https://redis.io/commands/zrevrangebyscore</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RangeByValueAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.Exclude,System.Int64,System.Int64)">
            <summary>
            When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at key with a value between min and max.
            </summary>
            <param name="min">The min value to filter by.</param>
            <param name="max">The max value to filter by.</param>
            <param name="exclude">Which of <paramref name="min"/> and <paramref name="max"/> to exclude (defaults to both inclusive).</param>
            <param name="skip">How many items to skip.</param>
            <param name="take">How many items to take.</param>
            <remarks>https://redis.io/commands/zrangebylex</remarks>
            <returns>list of elements in the specified score range.</returns>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.SortedSetRangeByValueAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.Exclude,StackExchange.Redis.Order,System.Int64,System.Int64)">
            <summary>
            When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns all the elements in the sorted set at key with a value between min and max.
            </summary>
            <param name="key">The key of the sorted set.</param>
            <param name="min">The min value to filter by.</param>
            <param name="max">The max value to filter by.</param>
            <param name="exclude">Which of <paramref name="min"/> and <paramref name="max"/> to exclude (defaults to both inclusive).</param>
            <param name="order">Whether to order the data ascending or descending</param>
            <param name="skip">How many items to skip.</param>
            <param name="take">How many items to take.</param>
            <param name="flags">The flags to use for this operation.</param>
            <remarks>https://redis.io/commands/zrangebylex</remarks>
            <remarks>https://redis.io/commands/zrevrangebylex</remarks>
            <returns>list of elements in the specified score range.</returns>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.SortedSetRankAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.Order)">
            <summary>
            Returns the rank of member in the sorted set stored at key, by default with the scores ordered from low to high. The rank (or index) is 0-based, which means that the member with the lowest score has rank 0.
            </summary>
            <param name="member">The member to get the rank of.</param>
            <param name="order">The order to sort by (defaults to ascending).</param>
            <returns>If member exists in the sorted set, the rank of member; If member does not exist in the sorted set or key does not exist, null</returns>
            <remarks>https://redis.io/commands/zrank</remarks>
            <remarks>https://redis.io/commands/zrevrank</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RemoveMemberAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Removes the specified member from the sorted set stored at key. Non existing members are ignored.
            </summary>
            <param name="member">The member to remove.</param>
            <returns>True if the member existed in the sorted set and was removed; False otherwise.</returns>
            <remarks>https://redis.io/commands/zrem</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RemoveMembersAsync(StackExchange.Redis.RedisValue[])">
            <summary>
            Removes the specified members from the sorted set stored at key. Non existing members are ignored.
            </summary>
            <param name="members">The members to remove.</param>
            <returns>The number of members removed from the sorted set, not including non existing members.</returns>
            <remarks>https://redis.io/commands/zrem</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RemoveRangeByRankAsync(System.Int64,System.Int64)">
            <summary>
            Removes all elements in the sorted set stored at key with rank between start and stop. Both start and stop are 0 -based indexes with 0 being the element with the lowest score. These indexes can be negative numbers, where they indicate offsets starting at the element with the highest score. For example: -1 is the element with the highest score, -2 the element with the second highest score and so forth.
            </summary>
            <param name="start">The minimum rank to remove.</param>
            <param name="stop">The maximum rank to remove.</param>
            <returns>The number of elements removed.</returns>
            <remarks>https://redis.io/commands/zremrangebyrank</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RemoveRangeByScoreAsync(System.Double,System.Double,StackExchange.Redis.Exclude)">
            <summary>
            Removes all elements in the sorted set stored at key with a score between min and max (inclusive by default).
            </summary>
            <param name="start">The minimum score to remove.</param>
            <param name="stop">The maximum score to remove.</param>
            <param name="exclude">Which of <paramref name="start"/> and <paramref name="stop"/> to exclude (defaults to both inclusive).</param>
            <returns>The number of elements removed.</returns>
            <remarks>https://redis.io/commands/zremrangebyscore</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.RemoveRangeByValueAsync(StackExchange.Redis.RedisValue,StackExchange.Redis.RedisValue,StackExchange.Redis.Exclude)">
            <summary>
            When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command removes all elements in the sorted set stored at key between the lexicographical range specified by min and max.
            </summary>
            <param name="min">The minimum value to remove.</param>
            <param name="max">The maximum value to remove.</param>
            <param name="exclude">Which of <paramref name="min"/> and <paramref name="max"/> to exclude (defaults to both inclusive).</param>
            <returns>the number of elements removed.</returns>
            <remarks>https://redis.io/commands/zremrangebylex</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.ScanAsync(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            The ZSCAN command is used to incrementally iterate over a sorted set
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="pageSize">The page size to iterate by.</param>
            <param name="cursor">The cursor position to start at.</param>
            <param name="pageOffset">The page offset to start at.</param>
            <returns>Yields all matching elements of the sorted set.</returns>
            <remarks>https://redis.io/commands/zscan</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.ScoreAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Returns the score of member in the sorted set at key; If member does not exist in the sorted set, or key does not exist, nil is returned.
            </summary>
            <param name="member">The member to get a score for.</param>
            <returns>The score of the member.</returns>
            <remarks>https://redis.io/commands/zscore</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.PopAsync(StackExchange.Redis.Order)">
            <summary>
            Removes and returns the first element from the sorted set stored at key, by default with the scores ordered from low to high.
            </summary>
            <param name="order">The order to sort by (defaults to ascending).</param>
            <returns>The removed element, or nil when key does not exist.</returns>
            <remarks>https://redis.io/commands/zpopmin</remarks>
            <remarks>https://redis.io/commands/zpopmax</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.SortedSetRedisKey.PopAsync(StackExchange.Redis.RedisKey,System.Int64,StackExchange.Redis.Order,StackExchange.Redis.CommandFlags)">
            <summary>
            Removes and returns the specified number of first elements from the sorted set stored at key, by default with the scores ordered from low to high.
            </summary>
            <param name="key">The key of the sorted set.</param>
            <param name="count">The number of elements to return.</param>
            <param name="order">The order to sort by (defaults to ascending).</param>
            <param name="flags">The flags to use for this operation.</param>
            <returns>An array of elements, or an empty array when key does not exist.</returns>
            <remarks>https://redis.io/commands/zpopmin</remarks>
            <remarks>https://redis.io/commands/zpopmax</remarks>
        </member>
        <member name="T:MyLab.Redis.ObjectModel.StringRedisKey">
            <summary>
            Represent Redis STRING key
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.#ctor(MyLab.Redis.RedisDbProvider,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.ObjectModel.StringRedisKey"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.DecrementAsync(System.Int64)">
            <summary>
            Decrements the number stored at key by decrement. If the key does not exist, it is set to 0 before performing the operation.
            An error is returned if the key contains a value of the wrong type or contains a string that is not representable as integer. This operation is limited to 64 bit signed integers.
            </summary>
            <param name="value">The amount to decrement by (defaults to 1).</param>
            <returns>The value of key after the decrement.</returns>
            <remarks>https://redis.io/commands/decrby</remarks>
            <remarks>https://redis.io/commands/decr</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.DecrementAsync(System.Double)">
            <summary>
            Decrements the string representing a floating point number stored at key by the specified decrement. If the key does not exist, it is set to 0 before performing the operation. The precision of the output is fixed at 17 digits after the decimal point regardless of the actual internal precision of the computation.
            </summary>
            <param name="value">The amount to decrement by (defaults to 1).</param>
            <returns>The value of key after the decrement.</returns>
            <remarks>https://redis.io/commands/incrbyfloat</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.GetAsync">
            <summary>
            Get the value of key. If the key does not exist the special value nil is returned. An error is returned if the value stored at key is not a string, because GET only handles string values.
            </summary>
            <returns>The value of key, or nil when key does not exist.</returns>
            <remarks>https://redis.io/commands/get</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.GetRangeAsync(System.Int64,System.Int64)">
            <summary>
            Returns the substring of the string value stored at key, determined by the offsets start and end (both are inclusive). Negative offsets can be used in order to provide an offset starting from the end of the string. So -1 means the last character, -2 the penultimate and so forth.
            </summary>
            <param name="start">The start index of the substring to get.</param>
            <param name="end">The end index of the substring to get.</param>
            <returns>The substring of the string value stored at key.</returns>
            <remarks>https://redis.io/commands/getrange</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.GetSetAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Atomically sets key to value and returns the old value stored at key.
            </summary>
            <param name="value">The value to replace the existing value with.</param>
            <returns>The old value stored at key, or nil when key did not exist.</returns>
            <remarks>https://redis.io/commands/getset</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.IncrementAsync(System.Int64)">
            <summary>
            Increments the number stored at key by increment. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that is not representable as integer. This operation is limited to 64 bit signed integers.
            </summary>
            <param name="value">The amount to increment by (defaults to 1).</param>
            <returns>The value of key after the increment.</returns>
            <remarks>https://redis.io/commands/incrby</remarks>
            <remarks>https://redis.io/commands/incr</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.IncrementAsync(System.Double)">
            <summary>
            Increments the string representing a floating point number stored at key by the specified increment. If the key does not exist, it is set to 0 before performing the operation. The precision of the output is fixed at 17 digits after the decimal point regardless of the actual internal precision of the computation.
            </summary>
            <param name="value">The amount to increment by (defaults to 1).</param>
            <returns>The value of key after the increment.</returns>
            <remarks>https://redis.io/commands/incrbyfloat</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.LengthAsync">
            <summary>
            Returns the length of the string value stored at key.
            </summary>
            <returns>the length of the string at key, or 0 when key does not exist.</returns>
            <remarks>https://redis.io/commands/strlen</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.SetAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Set key to hold the string value. If key already holds a value, it is overwritten, regardless of its type.
            </summary>
            <param name="value">The value to set.</param>
            <returns>`true` - if the string was set, `false` - otherwise.</returns>
            <remarks>https://redis.io/commands/set</remarks>
        </member>
        <member name="M:MyLab.Redis.ObjectModel.StringRedisKey.SetRangeAsync(System.Int64,StackExchange.Redis.RedisValue)">
            <summary>
            Overwrites part of the string stored at key, starting at the specified offset, for the entire length of value. If the offset is larger than the current length of the string at key, the string is padded with zero-bytes to make offset fit. Non-existing keys are considered as empty strings, so this command will make sure it holds a string large enough to be able to set value at offset.
            </summary>
            <param name="offset">The offset in the string to overwrite.</param>
            <param name="value">The value to overwrite with.</param>
            <returns>The length of the string after it was modified by the command.</returns>
            <remarks>https://redis.io/commands/setrange</remarks>
        </member>
        <member name="T:MyLab.Redis.RedisCacheProvider">
            <summary>
            Provides Redis cache
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisCacheProvider.#ctor(MyLab.Redis.RedisDbLink,MyLab.Redis.RedisOptions)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.RedisCacheProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisCacheProvider.Provide(System.String)">
            <summary>
            Provides <see cref="T:MyLab.Redis.ObjectModel.RedisCache"/> object
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbKeysProvider.String(System.String)">
            <summary>
            Gets STRING key
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbKeysProvider.Hash(System.String)">
            <summary>
            Gets HASH key
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbKeysProvider.Set(System.String)">
            <summary>
            Gets SET key
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbKeysProvider.SortedSet(System.String)">
            <summary>
            Gets SORTED SET key
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbKeysProvider.List(System.String)">
            <summary>
            Gets LIST key
            </summary>
        </member>
        <member name="T:MyLab.Redis.RedisDbProvider">
            <summary>
            Provides Redis database object
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbProvider.#ctor(MyLab.Redis.Connection.IRedisConnectionProvider,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.RedisDbProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbProvider.Provide">
            <summary>
            Provides Redis database with index from ctor
            </summary>
        </member>
        <member name="T:MyLab.Redis.RedisDbToolsProvider">
            <summary>
            Provides Redis tools for database
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbToolsProvider.Cache(System.String)">
            <summary>
            Provides Redis base cache by name
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisDbToolsProvider.Script">
            <summary>
            Creates script tools object
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyLab.Redis.RedisOperationException">
            <summary>
            Occurs when operation could not be performed
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.RedisOperationException"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisOperationException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.RedisOperationException"/>
            </summary>
        </member>
        <member name="T:MyLab.Redis.RedisOptions">
            <summary>
            Contains Redis configuration
            </summary>
        </member>
        <member name="P:MyLab.Redis.RedisOptions.ConnectionString">
            <summary>
            Connection string
            </summary>
            <remarks>https://stackexchange.github.io/StackExchange.Redis/Configuration</remarks>
        </member>
        <member name="P:MyLab.Redis.RedisOptions.Password">
            <summary>
            Overrides password from <see cref="P:MyLab.Redis.RedisOptions.ConnectionString"/>
            </summary>
        </member>
        <member name="P:MyLab.Redis.RedisOptions.BackgroundRetryPeriodSec">
            <summary>
            Retry period in seconds when background connection mode
            </summary>
        </member>
        <member name="P:MyLab.Redis.RedisOptions.Cache">
            <summary>
            Cache options
            </summary>
        </member>
        <member name="T:MyLab.Redis.CacheOptions">
            <summary>
            Cache options
            </summary>
        </member>
        <member name="P:MyLab.Redis.CacheOptions.Name">
            <summary>
            Cache name
            </summary>
        </member>
        <member name="P:MyLab.Redis.CacheOptions.Key">
            <summary>
            Cache key name
            </summary>
        </member>
        <member name="P:MyLab.Redis.CacheOptions.DefaultExpiry">
            <summary>
            Default expiry fro cache items
            </summary>
        </member>
        <member name="T:MyLab.Redis.RedisServerProvider">
            <summary>
            Provides Redis server object
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisServerProvider.#ctor(MyLab.Redis.Connection.IRedisConnectionProvider,System.Net.EndPoint)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.RedisServerProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisServerProvider.Provide">
            <summary>
            Provides Redis server object
            </summary>
        </member>
        <member name="T:MyLab.Redis.RedisServerToolsProvider">
            <summary>
            Provides Redis server tools
            </summary>
        </member>
        <member name="M:MyLab.Redis.RedisServerToolsProvider.PingAsync">
            <summary>
            This command is often used to test if a connection is still alive, or to measure latency.
            </summary>
            <returns>The observed latency.</returns>
            <remarks>https://redis.io/commands/ping</remarks>
        </member>
        <member name="M:MyLab.Redis.RedisServerToolsProvider.EchoAsync(StackExchange.Redis.RedisValue)">
            <summary>
            Return the same message passed in
            </summary>
            <param name="message">The message to echo.</param>
            <remarks>https://redis.io/commands/echo</remarks>
        </member>
        <member name="M:MyLab.Redis.RedisServerToolsProvider.KeysAsync(System.String,System.Int32,System.Int32,System.Int64,System.Int32)">
            <summary>
            Returns all keys matching pattern; the KEYS or SCAN commands will be used based on the server capabilities; note: to resume an iteration via <i>cursor</i>, cast the original enumerable or enumerator to <i>IScanningCursor</i>.
            </summary>
            <param name="database">The database ID.</param>
            <param name="pattern">The pattern to use.</param>
            <param name="pageSize">The page size to iterate by.</param>
            <param name="cursor">The cursor position to resume at.</param>
            <param name="pageOffset">The page offset to start at.</param>
            <remarks>Warning: consider KEYS as a command that should only be used in production environments with extreme care.</remarks>
            <remarks>https://redis.io/commands/keys</remarks>
            <remarks>https://redis.io/commands/scan</remarks>
        </member>
        <member name="M:MyLab.Redis.RedisServerToolsProvider.FlushAllDatabasesAsync">
            <summary>
            Delete all the keys of all databases on the server.
            </summary>
            <remarks>https://redis.io/commands/flushall</remarks>
        </member>
        <member name="M:MyLab.Redis.RedisServerToolsProvider.FlushDatabaseAsync(System.Int32)">
            <summary>
            Delete all the keys of the database.
            </summary>
            <param name="database">The database ID.</param>
            <remarks>https://redis.io/commands/flushdb</remarks>
        </member>
        <member name="T:MyLab.Redis.Scripting.IRedisScriptEvaluator">
            <summary>
            Defines case relative redis script evaluator
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.IRedisScriptEvaluator.EvaluateScriptAsync(StackExchange.Redis.RedisKey[],StackExchange.Redis.RedisValue[])">
            <summary>
            Evaluates script
            </summary>
        </member>
        <member name="T:MyLab.Redis.Scripting.RedisScriptEvaluationBuilder">
            <summary>
            Collect script evaluation parameters and evaluate script
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptEvaluationBuilder.#ctor(MyLab.Redis.Scripting.IRedisScriptEvaluator)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.Scripting.RedisScriptEvaluationBuilder"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptEvaluationBuilder.WithKeys(System.String[])">
            <summary>
            Adds keys for script evaluation
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptEvaluationBuilder.WithKey(MyLab.Redis.ObjectModel.RedisKeyBase)">
            <summary>
            Adds key for script evaluation
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptEvaluationBuilder.WithArgs(StackExchange.Redis.RedisValue[])">
            <summary>
            Adds args for script evaluation
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptEvaluationBuilder.EvaluateAsync">
            <summary>
            Evaluates script
            </summary>
        </member>
        <member name="T:MyLab.Redis.Scripting.RedisScriptTools">
            <summary>
            Provides script tools
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptTools.#ctor(MyLab.Redis.RedisDbProvider)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.Redis.Scripting.RedisScriptTools"/>
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptTools.KillCurrentAsync">
            <summary>
            Kills the currently executing Lua script, assuming no write operation was yet performed by the script.
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptTools.LoadAsync(System.String)">
            <summary>
            Load a script into the scripts cache, without executing it
            </summary>
            <param name="script">script text</param>
            <returns>SHA1 digest of the script added into the script cache</returns>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptTools.ExistsAsync(System.String[])">
            <summary>
            Returns information about the existence of the scripts in the script cache.
            </summary>
            <returns>
            Array reply The command returns an array of bool that correspond to the specified SHA1 digest arguments.
            </returns>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptTools.ExistsAsync(System.String)">
            <summary>
            Returns information about the existence of the scripts in the script cache.
            </summary>
            <returns>
            Array reply The command returns an array of bool that correspond to the specified SHA1 digest arguments.
            </returns>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptTools.FlushCacheAsync">
            <summary>
            Flush the Lua scripts cache
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptTools.Inline(System.String)">
            <summary>
            Creates evaluation builder for inline script
            </summary>
        </member>
        <member name="M:MyLab.Redis.Scripting.RedisScriptTools.BySha(System.String)">
            <summary>
            Creates evaluation builder for script by SHA1
            </summary>
        </member>
        <member name="T:MyLab.Redis.Services.IRedisService">
            <summary>
            Provides Redis interaction features
            </summary>
        </member>
        <member name="M:MyLab.Redis.Services.IRedisService.Db">
            <summary>
            Gets DB tools provider for default database
            </summary>
        </member>
        <member name="M:MyLab.Redis.Services.IRedisService.Db(System.Int32)">
            <summary>
            Gets DB tools provider for specified database
            </summary>
        </member>
        <member name="M:MyLab.Redis.Services.IRedisService.Server">
            <summary>
            Provides tools for default server
            </summary>
        </member>
        <member name="M:MyLab.Redis.Services.IRedisService.Server(System.Net.EndPoint)">
            <summary>
            Provides tools for server with specified endpoint
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HealthChecksBuilderExtensions.AddRedis(Microsoft.Extensions.DependencyInjection.IHealthChecksBuilder)">
            <summary>
            Adds Rabbit checks
            </summary>
        </member>
    </members>
</doc>
